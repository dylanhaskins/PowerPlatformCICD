name: $(BuildDefinitionName)_$(SourceBranchName)_$(Build.Reason)_1.$(Year:yy)$(DayOfYear).$(Hours)$(Minutes)

resources:
 repositories:
   - repository: self

pool:
  vmImage: 'windows-latest'

trigger:
  branches:
    include:
    - /*
  paths:
    exclude:
    - README.md

pr:
  paths:
    exclude:
    - README.md

variables:
  - name : BuildPlatform
    value: 'any cpu'
  - name : BuildConfiguration
    value: 'release'
  - name : Solution
    value: '**\*.sln'
  - group: replaceRepo.D365CDEnvironment

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: buildjob
        displayName: Build Job
        steps:
          - checkout: self
            submodules: true
    
          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.5.1'
            inputs:
              versionSpec: 5.5.1

          - task: NuGetCommand@2
            displayName: 'NuGet restore'
            inputs:
              restoreSolution: '$(Solution)'

          - task: VSBuild@1
            displayName: 'Build Solution'
            inputs:
              solution: '$(Solution)'
              vsVersion: latest
              platform: '$(BuildPlatform)'
              configuration: '$(BuildConfiguration)'
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\\"'
          
          - task: VSTest@2
            displayName: Run Unit and UI Tests
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: '$(System.DefaultWorkingDirectory)'

          - task: PowerShell@2
            displayName: 'Pack Solution and Run Solution Checker'
            inputs:
              targetType: filePath
              filePath: 'Solutions/Scripts/SolutionPack.ps1'
              arguments: '-aadTenant $(aadTenant) -aadPowerAppId $(aadPowerAppId) -aadPowerAppSecret $(aadPowerAppSecret)'

          - task: CopyFiles@2
            displayName: 'Copy Build Artifact to: $(build.artifactstagingdirectory)'
            inputs:
              SourceFolder: '$(system.defaultworkingdirectory)'
              Contents: |
                **\bin\$(BuildConfiguration)\**
                deployPackages.json
              TargetFolder: '$(build.artifactstagingdirectory)'

          - task: PublishSymbols@2
            displayName: 'Publish symbols path'
            inputs:
              SearchPattern: '**\bin\**\*.pdb'
              PublishSymbols: false
            continueOnError: true


          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact: drop'
            inputs:
              path: '$(build.artifactstagingdirectory)'
              artifact: drop

  - stage: Deployment_Staging
    
    displayName: Deployment Staging
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
    - deployment: DeployJob      
      displayName: Deployment Staging 
      environment: 'Deployment Staging'
      variables:
        - group: replaceRepo.D365CDEnvironment
      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              displayName: 'Deploy Solution'
              inputs:
                targetType: filePath
                filePath: '$(Pipeline.Workspace)/drop/Solutions/bin/Release/Scripts/SolutionDeploy.ps1'
                arguments: '-DeployServerUrl $(d365url) -UserName $(d365username) -Password $(d365password) -PipelinePath $(Pipeline.Workspace)'

  - stage: Test
    
    displayName: Test
    dependsOn: 'Deployment_Staging'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI','PullRequest'))
    jobs:
    - deployment: DeployJob      
      displayName: Test 
      environment: 'Test'
      variables:
        - group: replaceRepo.D365TestEnvironment
      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              displayName: 'Deploy Solution'
              inputs:
                targetType: filePath
                filePath: '$(Pipeline.Workspace)/drop/Solutions/bin/Release/Scripts/SolutionDeploy.ps1'
                arguments: '-DeployServerUrl $(d365url) -UserName $(d365username) -Password $(d365password) -PipelinePath $(Pipeline.Workspace)'